var i=class extends Error{constructor(t,r){super(r||"Unknown response error");this.code=t||0,this.name=this.constructor.name}toObject(){return{code:this.code,message:this.message}}toJson(){return JSON.stringify(this.toObject())}};var l=class{constructor(e){this.apiInstance=new a(e)}async auth(e,t){return await this.getRequest("auth",{login:e,password:t})}async getServers(){return await this.getRequest("servers")}async getProfile(e){return await this.getRequest("profile",{uuid:e})}async getUpdates(e){return await this.getRequest("updates",{dir:e})}async getRequest(e,t){try{let{data:r}=await this.apiInstance.send(e,t);return r}catch(r){let{code:n,message:d}=r;throw new i(n,d)}}};var g=WebSocket;var u,b=new Uint8Array(16);function m(){if(!u&&(u=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||typeof msCrypto<"u"&&typeof msCrypto.getRandomValues=="function"&&msCrypto.getRandomValues.bind(msCrypto),!u))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return u(b)}var h=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;function y(o){return typeof o=="string"&&h.test(o)}var E=y;var s=[];for(c=0;c<256;++c)s.push((c+256).toString(16).substr(1));var c;function k(o){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,t=(s[o[e+0]]+s[o[e+1]]+s[o[e+2]]+s[o[e+3]]+"-"+s[o[e+4]]+s[o[e+5]]+"-"+s[o[e+6]]+s[o[e+7]]+"-"+s[o[e+8]]+s[o[e+9]]+"-"+s[o[e+10]]+s[o[e+11]]+s[o[e+12]]+s[o[e+13]]+s[o[e+14]]+s[o[e+15]]).toLowerCase();if(!E(t))throw TypeError("Stringified UUID is invalid");return t}var R=k;function x(o,e,t){o=o||{};var r=o.random||(o.rng||m)();if(r[6]=r[6]&15|64,r[8]=r[8]&63|128,e){t=t||0;for(var n=0;n<16;++n)e[t+n]=r[n];return e}return R(r)}var v=x;var p=class{constructor(){this.listeners=new Map}addListener(e,t){this.listeners.set(e,t)}emit(e){if(e.uuid===void 0)return console.error("[AuroraAPI] Broken request: ",e);if(!this.listeners.has(e.uuid))return console.error("[AuroraAPI] Unhandled request: ",e);this.listeners.get(e.uuid)(e),this.listeners.delete(e.uuid)}};var a=class{constructor(e,t){this._messageEmitter=new p;this._ready=()=>{console.error("[AuroraAPI] If you see this message, tell the developer of the `aurora-api` library that he is the creator of the crutches.")};this._socket=new g(e),this._socket.onclose=r=>this.onClose(r,t?.onClose),this._socket.onerror=r=>this.onError(r,t?.onError),this._socket.onmessage=r=>this.onMessage(r,t?.onMessage),this._socket.onopen=r=>this.onOpen(r,t?.onOpen)}close(e,t){this._socket.close(e,t)}hasConnected(){return this._socket.readyState===this._socket.OPEN}async ready(){return this.hasConnected()?!0:await new Promise(e=>{this._ready=()=>{e(!0)}})}send(e,t={}){if(!this.hasConnected())throw new i(90,"[AuroraAPI] WebSocket not connected");let r=v();return this._socket.send(JSON.stringify({type:e,uuid:r,data:t})),new Promise((n,d)=>{this._messageEmitter.addListener(r,f=>{f.code!==void 0?d(f):n(f)})})}onOpen(e,t){this._ready(),console.log("[AuroraAPI] Connection established"),t&&t(e)}onClose(e,t){if(e.wasClean)return console.log("[AuroraAPI] Connection closed");e.code===1006?console.error("[AuroraAPI] Break connection"):console.error("[AuroraAPI] Unknown error",e),t&&t(e)}onMessage(e,t){this._messageEmitter.emit(JSON.parse(e.data)),t&&t(e)}onError(e,t){console.error("[AuroraAPI] WebSocket error observed:",e),t&&t(e)}};export{l as AuroraAPI,a as AuroraAPISocket};
//# sourceMappingURL=aurora-api-web.js.map
